package com.itheima.service;//Package com.itheima.service;import com.itheima.bean.Student;import com.itheima.mapper.StudentMapper;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;import java.util.List;/*    业务层实现类 */public class StudentServiceImpl implements StudentService {    //创建持久层对象    //private StudentMapper mapper = new StudentMapperImpl();    @Override    public List<Student> selectAll() {        List<Student> list =null;        InputStream is =null;        SqlSession sqlSession =null;        try {            //1.加载核心配置文件          is = Resources.getResourceAsStream("MyBatisConfig.xml");            //2.获取SqlSession工厂对象            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);            //3.通过SqlSession工厂对象获取SqlSession对象            sqlSession = sqlSessionFactory.openSession(true);            //4.获取StudentMapper接口的实现类对象(是一个多态类)            StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);            //4.2通过实现类对象获取方法，接受结果            list = mapper.selectAll();            //5.释放资源            //6.返回结果        } catch (IOException e) {            e.printStackTrace();        }finally {            if(is!=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if(sqlSession!=null){                sqlSession.close();            }        }        return list;    }    @Override    public Student selectById(Integer id) {        Student stu =null;        InputStream is =null;        SqlSession sqlSession =null;        try {            //1.加载核心配置文件            is = Resources.getResourceAsStream("MyBatisConfig.xml");            //2.获取SqlSession工厂对象            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);            //3.通过SqlSession工厂对象获取SqlSession对象            sqlSession = sqlSessionFactory.openSession(true);            //4.获取StudentMapper接口的实现类对象(是一个多态类)            StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);            //4.2通过实现类对象获取方法，接受结果            stu = mapper.selectById(id);            //5.释放资源            //6.返回结果        } catch (IOException e) {            e.printStackTrace();        }finally {            if(is!=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if(sqlSession!=null){                sqlSession.close();            }        }        return stu;    }    @Override    public Integer insert(Student stu) {        Integer result =null;        InputStream is =null;        SqlSession sqlSession =null;        try {            //1.加载核心配置文件            is = Resources.getResourceAsStream("MyBatisConfig.xml");            //2.获取SqlSession工厂对象            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);            //3.通过SqlSession工厂对象获取SqlSession对象            sqlSession = sqlSessionFactory.openSession(true);            //4.获取StudentMapper接口的实现类对象(是一个多态类)            StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);            //4.2通过实现类对象获取方法，接受结果            result = mapper.insert(stu);            //5.释放资源            //6.返回结果        } catch (IOException e) {            e.printStackTrace();        }finally {            if(is!=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if(sqlSession!=null){                sqlSession.close();            }        }        return result;    }    @Override    public Integer update(Student stu) {        Integer result =null;        InputStream is =null;        SqlSession sqlSession =null;        try {            //1.加载核心配置文件            is = Resources.getResourceAsStream("MyBatisConfig.xml");            //2.获取SqlSession工厂对象            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);            //3.通过SqlSession工厂对象获取SqlSession对象            sqlSession = sqlSessionFactory.openSession(true);            //4.获取StudentMapper接口的实现类对象(是一个多态类)            StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);            //4.2通过实现类对象获取方法，接受结果            result = mapper.update(stu);            //5.释放资源            //6.返回结果        } catch (IOException e) {            e.printStackTrace();        }finally {            if(is!=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if(sqlSession!=null){                sqlSession.close();            }        }        return result;    }    @Override    public Integer delete(Integer id) {        Integer result =null;        InputStream is =null;        SqlSession sqlSession =null;        try {            //1.加载核心配置文件            is = Resources.getResourceAsStream("MyBatisConfig.xml");            //2.获取SqlSession工厂对象            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);            //3.通过SqlSession工厂对象获取SqlSession对象            sqlSession = sqlSessionFactory.openSession(true);            //4.获取StudentMapper接口的实现类对象(是一个多态类)            StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);            //4.2通过实现类对象获取方法，接受结果            result = mapper.delete(id);            //5.释放资源            //6.返回结果        } catch (IOException e) {            e.printStackTrace();        }finally {            if(is!=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if(sqlSession!=null){                sqlSession.close();            }        }        return result;    }}